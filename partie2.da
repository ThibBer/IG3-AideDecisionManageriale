Par minute
1. faire les entrées de client
2. vérifier la priorité des clients
3. traiter la file
4. faire la sortie

Générer les clients prioritaires selon Poisson 0.7
Générer les clients ordinaires selon Poisson 2
Générer les durées de service selon Poisson 2.19
Parmis les prioritaires:
 - 30% sont prioritaires absolus
 - 70% sont prioritaires relatifs
Une seule file d'attente
Nouveaux clients placés derrière les précédents qui ont le même statut
Prioritaire absolu arrive :
 - Directement en station si libre
 - Ejecte le client ordinaire en station qui a la plus grande durée de service restante
   - Ce dernier devient prioritaire absolu et sera placé au début de la file
Impatience : Si temps d'attente == 10 minutes et pas dans les 3 premiers, il part

Pour les tableaux, nous utilisons la méthode "splice" du javascript pour modifier le contenu d'un tableau
https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects/Array/splice

tab.splice(index, nb_elements_a_supprimer, ...element_a_ajouter)
index= l'index de début, là où il faut retirer ou ajouter des éléments
nb_elements_a_supprimer= le nombre d'éléments à retirer (0 si il n'y en a pas)
element_a_ajouter= les éléments à ajouter (vide si il n'y en a pas)

Temps de simulation: 600

Objet Client
 -> type (ABSOLU, RELATIF, ORDINAIRE)
 -> tempsArrivée
 -> duréeService

 object Cout
 -> systeme
 -> station
 -> innocupationStations
 -> perteClients

ORDINAIRE = 0
RELATIF = 1
ABSOLU = 2

POISSON_CLIENTS_PRIORITAIRES = 0.7
POISSON_CLIENTS_ORDINAIRES = 2

COUTS_HORAIRE_SYSTEME = {
    ORDINAIRE: 25,
    PRIORITAIRE_RELATIF: 35,
    PRIORITAIRE_ABSOLU: 45
}

COUTS_HORAIRE_OCCUPATION = {
    ORDINAIRE: 30,
    PRIORITAIRE: 32
}

COUT_HORAIRE_INNOCUPATION = 18

PERTES = {
    PRIORITAIRE: 20,
    ORDINAIRE: 15
}

module(nbStationsOptimal;nbStationsMin, nbStationsMax, tempsSimul;nbStationsOptimal)
---* nbStationsOptimal

nbStations = nbStationsMin
couts = []

do while(nbStations <= nbStationsMax)
    file = []
    tailleFile = 0

    // Pour le calcul des coûts
    nbMinutesSystemeOrdinaire = 0
    nbMinutesSystemeRelatif = 0
    nbMinutesSystemeAbsolu = 0
    nbMinutesStationPrioritaire = 0
    nbMinutesStationOrdinaire = 0
    nbMinutesStationInnocupée = 0
    nbPrioritairesPartis = 0
    nbOrdinairesPartis = 0

    module(initStations;nbStations;stations)
    temps = 1
    obtenir m, c, a , x0
    // pré : les valeurs pour m, c, a et x0 ont été calculées pour maximiser la période
    //       et ils passent le test du carré unité
    // post: Uns est un générateur (faire: Uns.next().value pour obtenir la valeur suivante)
    module(suiteUn;m,c,a,x0; Uns)

    do while(temps <= tempsSimul)
        if (temps <= 20)
            sortie "Affichage des stations en début de minute"
            module(afficherStations; stations, nbStations)

            sortie "Affichage des clients dans la file avant placement
            module(afficherFile; file, tailleFile)
        endif

        module(générerArrivées;Uns, temps;clientsOrdinaires, nbClientsOrdinaires, clientsPrioritairesRelatifs, nbClientsPrioritairesRelatifs, clientsPrioritairesAbsolus, nbClientsPrioritairesAbsolus, temps)

        // Ajout des nouveaux clients dans la file
        module(ajoutFile;file, tailleFile, clientsPrioritairesAbsolus, nbClientsPrioritairesAbsolus, ABSOLU;file, tailleFile)
        module(ajoutFile;file, tailleFile, clientsPrioritairesRelatifs, nbClientsPrioritairesRelatifs, RELATIF;file, tailleFile)
        module(ajoutFile;file, tailleFile, ClientsOrdinaires, nbClientsOrdinaires, ORDINAIRE;file, tailleFile)

        if (temps <= 20)
            sortie "Nombre d'arrivées : ", nbClientsPrioritairesAbsolus + nbClientsPrioritairesRelatifs + nbClientsOrdinaires
            module(afficherFile; clientsPrioritairesAbsolus, nbClientsPrioritairesAbsolus)
            module(afficherFile; clientsPrioritairesRelatifs, nbClientsPrioritairesRelatifs)
            module(afficherFile; ClientsOrdinaires, nbClientsOrdinaires)

            sortie "Affichage des clients dans la file après placement"
            module(afficherFile; file, tailleFile)
        endif

        // Gestion du client absolu qui éjecte un client ordinaire avec la plus grande durée de service
        module(rechercheFinType;file, tailleFile, ABSOLU; nbAbsolus)
        module(indiceStationPourAbsolu;stations,nbStations;iStation)
        nbExclus = 0
        do while(nbExclus < nbAbsolus && iStation > -1)
            // tabElementsSupprimes = array.splice(début, nbASupprimer[, élem1[, élem2[, ...]]])
            client = file.splice(nbExclus, 1)[0]
            ancienClient = stations[iStation]
            ancienClient.type = ABSOLU
            station[iStation] = client
            file.unshift(ancienClient) //Ajoute au début de la file
            nbExclus++

            module(indiceStationPourAbsolu;stations,nbStations;iStation)
        enddo

        // Place les clients de la file d'attente dans une station vide et décrémente le temps service
        iStation = 0
        do while(iStation < nbStations)
            module(stationEstVide; stations[iStation]; stationEstVide)
            if(stationEstVide)
                if(tailleFile > 0)
                    tailleFile--
                    stations[iStation] = file.shift() // récupère le premier élément de la file et le met dans la station
                    stations[iStation].duréeService--
                else
                    nbMinutesStationInnocupée++
                endif
            else
                stations[iStation].duréeService--
                if (stations[iStation].type == ORDINAIRE)
                    nbMinutesStationOrdinaire++
                    nbMinutesSystemeOrdinaire++
                else
                    nbMinutesStationPrioritaire++
                    if (stations[iStation].type == RELATIF)
                        nbMinutesSystemeRelatif++
                    else
                        nbMinutesSystemeAbsolu++
                    endif
                endif
            endif

            iStation++
        enddo

        iClient = 0
        do while (iClient < tailleFile)
            if (temps - file[iClient].tempsArrivée >= 10 AND iClient >= 3)
                if (file[iClient].type == ORDINAIRE)
                    nbOrdinairesPartis++
                else
                    nbPrioritairesPartis++
                endif

                file.splice(iClient,1)
                tailleFile--
            else
                if(file[iClient].type == ORDINAIRE)
                    nbMinutesSystemeOrdinaire++
                elseif(file[iClient].type == RELATIF)
                    nbMinutesSystemeRelatif++
                else
                    nbMinutesSystemeAbsolu++
                endif
            endif

            iClient++
        enddo

        if (temps <= 20)
            sortie "Affichage des stations en fin de minute"
            module(afficherStations; stations, nbStations)

            sortie "Affichage des clients dans la file en fin de minute"
            module(afficherFile; file, tailleFile)
        endif
        temps++
    enddo

    module(coutSysteme; nbMinutesSystemeOrdinaire, nbMinutesSystemeRelatif, nbMinutesSystemeAbsolu; coutSysteme)
    module(coutStation; nbMinutesStationPrioritaire, nbMinutesStationOrdinaire; coutStation)
    module(innocupationStations; nbMinutesStationInnocupée; innocupationStations)
    module(coutPerteClients; nbPrioritairesPartis, nbOrdinairesPartis; coutPerteClients)

    couts[nbStations - nbStationsMin] = {systeme = coutSysteme, station = coutStation, innocupationStations = innocupationStations, perteClients = coutPerteClients}

    nbStations++
enddo

module(afficherCoutsStations;couts, nbStationsMax - nbStationsMin, nbStationsMin)

module(rechercheMin; couts, nbStationsMax - nbStationsMin; nbStationsOptimal)
sortie "Nombre de stations optimale: ", nbStationsOptimal

infos = {
    systeme: [],
    station: [],
    innocupation: [],
    perte: [],
    total: [],
}

for (let i = 0; i < couts.length; i++) {
    infos.systeme.push(couts[i].systeme);
    infos.station.push(couts[i].station);
    infos.innocupation.push(couts[i].innocupationStations);
    infos.perte.push(couts[i].perteClients);
    infos.total.push(couts[i].systeme + couts[i].station + couts[i].innocupationStations + couts[i].perteClients);
}


sortie "Couts des différentes stations"
sortie infos
----

module(indiceStationPourAbsolu; stations, nbStations; iStationDureeServiceMax)
---* indiceStationPourAbsolu
dureeServiceMax = -1
iStationDureeServiceMax = -1

iStation = 0
station = stations[iStation]

do while(iStation < nbStations && station != NULL)
    if(station.type == ORDINAIRE && station.duréeService > dureeServiceMax)
        dureeServiceMax = station.duréeService
        iStationDureeServiceMax = iStation
    endif

    iStation++
    station = stations[iStation]
enddo
----

module(stationEstVide; station; stationEstVide)
---* stationEstVide
    stationEstVide = station == NULL or station == 0
----

module(afficherCoutsStations; couts, nbCouts, nbStationMin;)
---* afficherCoutsStations
    iCout = 0

    do while(iCout < nbCouts)
        cout = couts[iCout]

        module(coutNStations; cout; coutNStations)
        sortie iCout + nbStationsMin, " stations(s) ouvertes -> Cout du système : ", cout.systeme, " | Cout stations: ", cout.station, " |Cout innocupation du système: ", cout.innocupationStations, " | Cout de perte de clients: ", cout.perteClients, " \n\tCout total: , coutNStations
    enddo
----

module(afficherStations; stations, nbStations)
---* afficherStations
if(nbStations == 0)
    sortie "Aucune station occupée"
else
    iStation = 0

    do while(iStation < nbStations)
        module(afficherStation; stations[iStation], iStation)

        iStation++
    enddo
endif
----

module(afficherStation;client, iStation;)
---* afficherStation
    if(client != null)
        sortie "Station ", iStation, " - Client ", client.type, " durée service restant: ", client.duréeService
    else
        sortie "Station ", iStation, " - vide "
    endif
----

module(afficherFile; file, tailleFile;)
---* afficherFile
iClientFile = 0

do while (iClientFile < tailleFile)
    client = file[iClientFile]

    if(client.duréeService != NULL)
        sortie "[", iClientFile + 1, "] - ", file[iClientFile].type, " | Durée de service: ", client.duréeService
    else
        sortie "[", iClientFile + 1, "] - ", file[iClientFile].type
    endif

    iClientFile++
enddo
----

module(rechercheMin;couts, nbStations;nbStationsOptimal)
---* rechercheMin
iStation = 0
coutMin = HV
nbStationsOptimal = -1

do while(iStation < nbStations)
    module(coutNStations; couts[iStation]; coutsStations)

    if(coutsStations < countMin)
        countMin = coutsStations
        nbStationsOptimal = iStation
    endif

    iStation++
enddo
----

module(initStations;nbStations;stations)
---* initStations
stations = nouveau tableau stations de longueur nbStations // Contient le client de la station
----

module(générerArrivées;Un, temps;clientsOrdinaires, nbClientsOrdinaires, clientsPrioritairesRelatifs, nbclientsPrioritairesRelatifs, clientsPrioritairesAbsolus, nbClientsPrioritairesAbsolus)
---* générerArrivées

// Générer les objets clients ordinaires
module(générerClients; POISSON_CLIENTS_ORDINAIRES, ORDINAIRE, temps, Uns; clientsOrdinaires, nbClientsOrdinaires)
module(générerClients; POISSON_CLIENTS_PRIORITAIRES, PRIORITAIRE, temps, Uns; clientsPrioritaires)
module(séparerPrioritaires;clientsPrioritaires; clientsPrioritairesRelatifs,clientsPrioritairesRelatifs, clientsPrioritairesAbsolus, nbClientsPrioritairesAbsolus)

tailleFile += nbClientsOrdinaires + nbClientsPrioritaires + nbClientsPrioritairesAbsolus
----

module(duréeServiceGénérée; lambda, Uns; x)
---*
    done, u = Uns.next()
    if(done)
        throw new Error("Aucun nombre aléatoire disponible")
    endif

    if u < 0.387096774
        x = 1
    else if u < 0.677419355
        x = 2
    else if u < 0.85483871
        x = 3
    else if u <  0.919354839
        x = 4
    else if u < 0.967741935
        x = 5
    else if u < 1
        x = 6
----

// https://en.wikipedia.org/wiki/Poisson_distribution#Generating_Poisson-distributed_random_variables
module(générerClients; lambda, type, temps, Uns; clients)
---* générerClients
    clients = [];
    nbClients = 0;
    const L = Math.exp(-lambda);
    let p = 1;
    do while (p > L)
        u, done = Uns.next(); // done est vrai quand il n'y a plus de nombre dans la suite
        if (done)
            throw new Error("Aucun nombre aléatoire disponible");
        else
            module(duréeServiceGénérée,POISSON_DUREE_SERVICES, Uns; duréeService))
            repetDS[duréeService]++;
            if (type == PRIORITAIRE && u < 0.3)
                type = ABSOLU
            else
                type = RELATIF
            endif
            clients[nbClients] = {type: type, duréeService: duréeService, tempsArrivée: temps}
            nbClients++
            p *= u;
        endif
    enddo
----

// Premier indice qui ne correspond pas au type (là où l'insertion va se faire)
module(rechercheFinType;file, tailleFile, type; indice)
---* rechercheFinType
indice = 0
if (type != ORIDINAIRE )
    do while(indice < tailleFile && file[indice].type >= type)
        indice++
    enddo
else
    indice = tailleFile
endif
----

module(ajoutFile;file, tailleFile, clients, nbClients, type; file, tailleFile)
---* ajoutFile
iNouvelleArrivee = 0
module(rechercheFinType;file, tailleFile, type; indice)
do while(iNouvelleArrivee < nbClients)
    file.splice(indice, 0, clients[iNouvelleArrivee])
    indice++
    tailleFile++
    iNouvelleArrivee++
enddo
----

module(coutNStation;cout;totalCouts)
---* coutNStation
totalCouts = cout.systeme + cout.stations + cout.innocupationStations + cout.perteClients
----

module(coutSysteme;nbMinutesSystemeOrdinaire, nbMinutesSystemeRelatif, nbMinutesSystemeAbsolu;coutSysteme)
---* coutSysteme
coutSysteme = (nbMinutesSystemeOrdinaire / 60) * COUTS_HORAIRE_SYSTEME.ORDINAIRE;
coutSysteme += (nbMinutesSystemeRelatif / 60) * COUTS_HORAIRE_SYSTEME.RELATIF;
coutSysteme += (nbMinutesSystemeAbsolu / 60) * COUTS_HORAIRE_SYSTEME.ABSOLU;
----

module(coutStation;nbMinutesStationPrioritaire, nbMinutesStationOrdinaire;coutStation)
---* coutStation
    coutStation = (nbMinutesStationPrioritaire / 60) * COUTS_HORAIRE_OCCUPATION.PRIORITAIRE;
    coutStation += (nbMinutesStationOrdinaire / 60) * COUTS_HORAIRE_OCCUPATION.ORDINAIRE;
----

module(coutInnocupationStations;nbMinutesStationInnocupée;coutInnocupationStations)
---* coutInnocupationStations
    coutInnocupationStations = (nbMinutesStationInnocupée / 60) * COUT_HORAIRE_INNOCUPATION
----

module(coutPerteClients;nbPrioritairesPartis, nbOrdinairesPartis;coutPerteClients)
---* coutPerteClients
    coutPerteClients = nbPrioritairesPartis * PERTE.PRIORITAIRE + nbOrdinairesPartis * PERTE.ORDINAIRE;
----